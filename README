

错误定位工具说明: 主要是提供Linux程序的日志输出
提供两个接口: SWriteLogFile 和 DWriteLogFile  两个接口输出的日志文件名和路径都需要自己指定

SWriteLogFile  参数构成: 日志文件名的全路径, fmt可变参信息              
    1. 输出显示两种形式: LOG[----"时间"---"行号"---"source.c文件名"---]INSIDE:[--"时间"--[lineNO:"行号"]--[FileName:"source.c文件名"]--[ERROR-MSG: "自定义信息"]--]
                                                                     |_________________________________________________________________________________________|                    
                                                                                                ^-这段为一个"自定义错误信息"
                        LOG[----"时间"---"行号"---"source.c文件名"---"自定义错误信息"]

    2. 未指定文件名和路径的情况：使用"当前代码文件的路径作为默认路径"，文件名使用: "filename-not-specified.log"
    3. 使用方法: 可以用宏定义出一个日志文件的完整路径传递或参数直接传递 "/home/filename-not-specified.log"之类, 以及fmt的自定义错误信息。
    4. 在第一层函数接口里定义SError对象, 在该层接口中如果有编写或调用其他接口 ,这些接口的参数都需要添加一个PSError指针类型对象, 将第一层SError对象传递进去
    如果在这些接口内，还有调用其他接口或者发生了任何错误,都可以调用SetSError来设置错误,表明是在第一层接口里的哪一个函数出现了问题. 
    这样就实现了调用层次的错误输出,可以更快定位错误.


DWriteLogFile: 参数构成: 路径, 文件名, fmt可变参信息       (路径可指定为NULL, 默认路径为当前"source.c"的路径)
    1. 输出显示: LOG[----"时间"---"自定义信息"]
    2. 以"年月日_filename.log"形式创建日志，输出日志信息。所以是按天输出。
    3. 如果有其他需要输出的信息可以通过更改参数或者直接修改内部代码。


错误定位结构 SError,PSError :{
        使用   : "时间", "行号", "文件名", "自定义错误信息"
        未使用 : "扩展结构: 函数名宏 __FUNCTION__ , errno, 自定义宏表述不同含义的错误 "
}

注意事项：   SetSError 的 "fmt" 最大输出size为256 末尾为 '\0'  -- fmt 信息最好用英文编写

